// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backendIotSystemUlsa.Data;

#nullable disable

namespace backendIotSystemUlsa.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backendIotSystemUlsa.Models.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("backendIotSystemUlsa.Models.MetricData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MetricId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StationsId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MetricId");

                    b.HasIndex("StationsId");

                    b.ToTable("MetricData");
                });

            modelBuilder.Entity("backendIotSystemUlsa.Models.MonitoringStations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectorId")
                        .IsUnique()
                        .HasFilter("[SectorId] IS NOT NULL");

                    b.ToTable("MonitoringStations");
                });

            modelBuilder.Entity("backendIotSystemUlsa.Models.Sectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("backendIotSystemUlsa.Models.MetricData", b =>
                {
                    b.HasOne("backendIotSystemUlsa.Models.Metric", "Metric")
                        .WithMany()
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendIotSystemUlsa.Models.MonitoringStations", "Stations")
                        .WithMany("Metrics")
                        .HasForeignKey("StationsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Metric");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("backendIotSystemUlsa.Models.MonitoringStations", b =>
                {
                    b.HasOne("backendIotSystemUlsa.Models.Sectors", "Sector")
                        .WithOne("MonitoringStation")
                        .HasForeignKey("backendIotSystemUlsa.Models.MonitoringStations", "SectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("backendIotSystemUlsa.Models.MonitoringStations", b =>
                {
                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("backendIotSystemUlsa.Models.Sectors", b =>
                {
                    b.Navigation("MonitoringStation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
